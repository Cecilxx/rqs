{
  "mrc": {
    "prefix": "mrc",
    "body": [
      "import React, { Component } from 'react'",
      "",
      "class ${ComponentName} extends Component {",
      "  render () {",
      "    return <div></div>",
      "  {",
      "}",
      "",
      "export default ${ComponentName}"
    ],
    "description": "Make a react Component snippet"
  },
  "mrcp": {
    "prefix": "mrcp",
    "body": [
      "import React, { Component } from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "class ${ComponentName} extends Component {",
      "  static propTypes = {}",
      "",
      "  render () {",
      "    return <div></div>",
      "  {",
      "}",
      "",
      "export default ${ComponentName}"
    ],
    "description": "Make a react Component snippet with PropTypes"
  },
  "mrcl": {
    "prefix": "mrcl",
    "body": [
      "import React, { Component } from 'react'",
      "",
      "class ${ComponentName} extends Component {",
      "  constructor () {",
      "    super()",
      "  }",
      "",
      "  componentWillMount () {}",
      "",
      "  componentDidMount () {}",
      "",
      "  componentWillReceiveProps (nextProps) {}",
      "",
      "  shouldComponentUpdate (nextProps, nextState) {}",
      "",
      "  componentWillUpdate (nextProps, nextState) {}",
      "",
      "  componentDidUpdate (prevProps, prevState) {}",
      "",
      "  componentWillUnmount() () {}",
      "",
      "  render () {",
      "    return <div></div>",
      "  {",
      "}",
      "",
      "export default ${ComponentName}"
    ],
    "description": "Make a react Component snippet start with Lifecycle Methods"
  },
  "mrcpl": {
    "prefix": "mrcpl",
    "body": [
      "import React, { Component } from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "class ${ComponentName} extends Component {",
      "  static propTypes = {}",
      "",
      "  constructor () {",
      "    super()",
      "  }",
      "",
      "  componentWillMount () {}",
      "",
      "  componentDidMount () {}",
      "",
      "  componentWillReceiveProps (nextProps) {}",
      "",
      "  shouldComponentUpdate (nextProps, nextState) {}",
      "",
      "  componentWillUpdate (nextProps, nextState) {}",
      "",
      "  componentWillUpdate (nextProps, nextState) {}",
      "",
      "  componentDidUpdate (prevProps, prevState) {}",
      "",
      "  componentWillUnmount() () {}",
      "",
      "  render () {",
      "    return <div></div>",
      "  {",
      "}",
      "",
      "export default ${ComponentName}"
    ],
    "description": "Make a react Component snippet with Lifecycle Methods and PropTypes"
  },
  "mrp": {
    "prefix": "mrp",
    "body": [
      "import React, { PureComponent } from 'react'",
      "",
      "class ${PureComponentName} extends PureComponent {",
      "  render () {",
      "    return <div></div>",
      "  {",
      "}",
      "",
      "export default ${PureComponentName}"
    ],
    "description": "Make a react PureComponent snippet"
  },
  "mrpp": {
    "prefix": "mrpp",
    "body": [
      "import React, { PureComponent } from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "class ${PureComponentName} extends PureComponent {",
      "  static propTypes = {}",
      "",
      "  render () {",
      "    return <div></div>",
      "  {",
      "}",
      "",
      "export default ${PureComponentName}"
    ],
    "description": "Make a react PureComponent snippet with PropTypes"
  },
  "mrpl": {
    "prefix": "mrpl",
    "body": [
      "import React, { PureComponent } from 'react'",
      "",
      "class ${PureComponentName} extends PureComponent {",
      "  constructor () {",
      "    super()",
      "  }",
      "",
      "  componentWillMount () {}",
      "",
      "  componentDidMount () {}",
      "",
      "  componentWillReceiveProps (nextProps) {}",
      "",
      "  shouldComponentUpdate (nextProps, nextState) {}",
      "",
      "  componentWillUpdate (nextProps, nextState) {}",
      "",
      "  componentWillUpdate (nextProps, nextState) {}",
      "",
      "  componentDidUpdate (prevProps, prevState) {}",
      "",
      "  componentWillUnmount() () {}",
      "",
      "  render () {",
      "    return <div></div>",
      "  {",
      "}",
      "",
      "export default ${PureComponentName}"
    ],
    "description": "Make a react PureComponent snippet with Lifecycle Methods"
  },
  "mrppl": {
    "prefix": "mrcpl",
    "body": [
      "import React, { PureComponent } from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "class ${PureComponentName} extends PureComponent {",
      "  static propTypes = {}",
      "",
      "  constructor () {",
      "    super()",
      "  }",
      "",
      "  componentWillMount () {}",
      "",
      "  componentDidMount () {}",
      "",
      "  componentWillReceiveProps (nextProps) {}",
      "",
      "  shouldComponentUpdate (nextProps, nextState) {}",
      "",
      "  componentWillUpdate (nextProps, nextState) {}",
      "",
      "  componentWillUpdate (nextProps, nextState) {}",
      "",
      "  componentDidUpdate (prevProps, prevState) {}",
      "",
      "  componentWillUnmount() () {}",
      "",
      "  render () {",
      "    return <div></div>",
      "  {",
      "}",
      "",
      "export default ${PureComponentName}"
    ],
    "description": "Make a react PureComponent snippet with Lifecycle Methods and PropTypes"
  },
  "mrs": {
    "prefix": "mrs",
    "body": [
      "import React from 'react'",
      "",
      "const ${StatelessComponent} = () => {",
      "  return <div></div>",
      "}",
      "",
      "export default ${StatelessComponent}"
    ],
    "description": "Make a react Stateless Component snippet"
  },
  "constructor": {
    "prefix": "cons",
    "body": [
      "constructor (props) {",
      "  super(props)",
      "  $1",
      "}"
    ],
    "description": "React Constructor function"
  },
  "componentWillMount": {
    "prefix": "comw",
    "body": [
      "componentWillMount () {",
      "  $1",
      "}"
    ],
    "description": "React componentWillMount function"
  },
  "componentDidMount": {
    "prefix": "comd",
    "body": [
      "componentDidMount () {",
      "  $1",
      "}"
    ],
    "description": "React componentDidMount function"
  },
  "componentWillUnmount": {
    "prefix": "comwu",
    "body": [
      "componentWillUnmount () {",
      "  $1",
      "}"
    ],
    "description": "React componentWillUnmount function"
  },
  "componentWillReceiveProps": {
    "prefix": "comwrp",
    "body": [
      "componentWillReceiveProps (nextProps) {",
      "  $1",
      "}"
    ],
    "description": "React componentWillReceiveProps function"
  },
  "shouldComponentUpdate": {
    "prefix": "shou",
    "body": [
      "shouldComponentUpdate (nextProps, nextState) {",
      "  $1",
      "}"
    ],
    "description": "React shouldComponentUpdate function"
  },
  "componentWillUpdate": {
    "prefix": "comwup",
    "body": [
      "componentWillUpdate (nextProps, nextState) {",
      "  $1",
      "}"
    ],
    "description": "React componentWillUpdate function"
  },
  "componentDidUpdate": {
    "prefix": "comdup",
    "body": [
      "componentDidUpdate (nextProps, nextState) {",
      "  $1",
      "}"
    ],
    "description": "React componentDidUpdate function"
  },
  "render": {
    "prefix": "ren",
    "body": [
      "render () {",
      "  return <div>$1</div>",
      "}"
    ],
    "description": "React render function"
  }
}